// See: https://spec.editorconfig.org/

type ValueBoolean = boolean;
type ValueNumber = number;

export type PropertyCharset = {
	key: 'charset';
	value: 'latin1' | 'utf-8-bom' | 'utf-8' | 'utf-16be' | 'utf-16le';
};

export type PropertyEndOfLine = {
	key: 'end_of_line';
	value: 'cr' | 'crlf' | 'lf';
};

export type PropertyIndentSize = {
	key: 'indent_size';
	value: ValueNumber;
};

export type PropertyIndentStyle = {
	key: 'indent_style';
	value: 'tab' | 'space';
};

export type PropertyInsertFinalNewline = {
	key: 'insert_final_newline';
	value: ValueBoolean;
};

export type PropertyRoot = {
	key: 'root';
	value: ValueBoolean;
};

export type PropertyTabWidth = {
	key: 'tab_width';
	value: ValueNumber;
};

export type PropertyTrimTrailingWhitespace = {
	key: 'trim_trailing_whitespace';
	value: ValueBoolean;
};

export type Property =
	| PropertyCharset
	| PropertyEndOfLine
	| PropertyIndentSize
	| PropertyIndentStyle
	| PropertyInsertFinalNewline
	| PropertyRoot
	| PropertyTabWidth
	| PropertyTrimTrailingWhitespace;

export type PropertySection =
	| PropertyCharset
	| PropertyEndOfLine
	| PropertyIndentSize
	| PropertyIndentStyle
	| PropertyInsertFinalNewline
	| PropertyTabWidth
	| PropertyTrimTrailingWhitespace;

export interface Section {
	name: string;
	properties: PropertySection[];
}

export interface EditorConfig {
	properties: Property[];
	sections: Section[];
}

export const DEFAULT_VALUES: { [key in Property['key']]: Property } = {
	charset: { key: 'charset', value: 'utf-8' },
	end_of_line: { key: 'end_of_line', value: 'lf' },
	indent_size: { key: 'indent_size', value: 2 },
	indent_style: { key: 'indent_style', value: 'tab' },
	insert_final_newline: { key: 'insert_final_newline', value: true },
	root: { key: 'root', value: true },
	tab_width: { key: 'tab_width', value: 2 },
	trim_trailing_whitespace: { key: 'trim_trailing_whitespace', value: true },
};

function serializeProperty(prop: Property) {
	return `${prop.key} = ${prop.value.toString()}`;
}

function serializeProperties(props: Property[]) {
	return Array.from(props)
		.sort((a, b) => a.key.localeCompare(b.key))
		.map((p) => serializeProperty(p))
		.join('\n');
}

function serializeSection(section: Section) {
	return [`[${section.name}]`, serializeProperties(section.properties)].join(
		'\n',
	);
}

function serializeSections(sections: Section[]) {
	return Array.from(sections)
		.sort((a, b) => a.name.localeCompare(b.name))
		.map((s) => serializeSection(s))
		.join('\n\n');
}

export function serialize(config: EditorConfig) {
	const lines = [
		'# Generated by editorconfig.timseverien.com',
		'# https://editor.timseverien.com/#config',
		serializeProperties(config.properties) + '\n',
		serializeSections(config.sections),
	];

	return lines.join('\n');
}
